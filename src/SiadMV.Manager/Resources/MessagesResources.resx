<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorDeliveryGroupNotExist" xml:space="preserve">
    <value>The delivery group does not exist.</value>
  </data>
  <data name="ErrorDeliveryNotExistDescription" xml:space="preserve">
    <value>A Delivery with the informed Postmates Delivery Id was not found.</value>
  </data>
  <data name="ErrorDeliveryNotExistTitle" xml:space="preserve">
    <value>The Delivery does not exist.</value>
  </data>
  <data name="ErrorDeliveryScheduleAlreadyExists" xml:space="preserve">
    <value>Scheduled Deliveries already exist for selected year and group. Use Update command instead.</value>
  </data>
  <data name="ErrorExternalServiceInvalidApiResourceDescription" xml:space="preserve">
    <value>The selected API Resource is not valid.</value>
  </data>
  <data name="ErrorExternalServiceInvalidApiResourceTitle" xml:space="preserve">
    <value>Invalid API Resource.</value>
  </data>
  <data name="ErrorExternalServiceInvalidRequestTypeDescription" xml:space="preserve">
    <value>The request type is not valid.</value>
  </data>
  <data name="ErrorExternalServiceInvalidRequestTypeTitle" xml:space="preserve">
    <value>Invalid Request</value>
  </data>
  <data name="ErrorExternalServiceUnavailableDescription" xml:space="preserve">
    <value>There was no response from the requested URL.</value>
  </data>
  <data name="ErrorExternalServiceUnavailableTitle" xml:space="preserve">
    <value>Service Unavailable</value>
  </data>
  <data name="ErrorLastUserAddress" xml:space="preserve">
    <value>The user has only one address. </value>
  </data>
  <data name="ErrorLastUserProvider" xml:space="preserve">
    <value>The user has only one provider.</value>
  </data>
  <data name="ErrorNoActiveSubscriptionForUser" xml:space="preserve">
    <value>There is no active subscription for current user.</value>
  </data>
  <data name="ErrorOrderNotExist" xml:space="preserve">
    <value>The order does not exist.</value>
  </data>
  <data name="ErrorPersonAlreadyExists" xml:space="preserve">
    <value>The person already exists.</value>
  </data>
  <data name="ErrorPreviousSubscriptionExists" xml:space="preserve">
    <value>The person already has an active subscription for this address and this product category.</value>
  </data>
  <data name="ErrorSubscriptionAlreadyCancelled" xml:space="preserve">
    <value>The subscription is cancelled and can't be modified.</value>
  </data>
  <data name="ErrorSubscriptionNotExist" xml:space="preserve">
    <value>The subscription does not exist.</value>
  </data>
  <data name="ErrorSubscriptionPlanNotExist" xml:space="preserve">
    <value>The subscription plan does not exist.</value>
  </data>
  <data name="ErrorUserAddressNotExists" xml:space="preserve">
    <value>The Address does not exist.</value>
  </data>
  <data name="ErrorUserAlreadyExists" xml:space="preserve">
    <value>The user already exists.</value>
  </data>
  <data name="ErrorUserNotExist" xml:space="preserve">
    <value>The user does not exist.</value>
  </data>
  <data name="ErrorUserProviderNotExist" xml:space="preserve">
    <value>The provider does not exist.</value>
  </data>
  <data name="ErrorWrongParameterDescription" xml:space="preserve">
    <value>The parameter could not be parsed.</value>
  </data>
  <data name="ErrorWrongParameterTitle" xml:space="preserve">
    <value>Wrong configuration parameter</value>
  </data>
  <data name="ErrorZipCodeNotExist" xml:space="preserve">
    <value>The ZipCode does not exist.</value>
  </data>
  <data name="SendContactFormSubject" xml:space="preserve">
    <value>Contact web page: {0}</value>
  </data>
  <data name="ErrorProductNotExist" xml:space="preserve">
    <value>The product does not exist.</value>
  </data> 
   <data name="OrderCreatedNotificationTitle" xml:space="preserve">
    <value>New Order Received!</value>
  </data>
  <data name="OrderCreatedNotificationDescription" xml:space="preserve">
    <value>Order {0} created!</value>
  </data>
  <data name="OrderUpdatedNotificationTitle" xml:space="preserve">
    <value>Order Updated!</value>
  </data>
  <data name="OrderUpdatedNotificationDescription" xml:space="preserve">
    <value>Order {0} was updated!</value>
  </data>
  <data name="OrderCancelledNotificationTitle" xml:space="preserve">
    <value>Order cancelled!</value>
  </data>
  <data name="OrderCancelledNotificationDescription" xml:space="preserve">
    <value>Order {0} was cancelled!</value>
  </data>
</root>